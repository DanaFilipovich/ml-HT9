# -*- coding: utf-8 -*-
"""Forest project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m4R0z_CjVWi0zSaxQ7wv83JToRD3XrpI
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

from google.colab import drive
drive.mount('/content/drive')

PATH = '/content/drive/MyDrive/Datas/Forest/'
train_data = pd.read_csv(PATH+'train.csv')
test_data = pd.read_csv(PATH+'test.csv')
submission = pd.read_csv(PATH+'sampleSubmission.csv')

train_data.shape

train_data.info()

train_data.head()

train_data.isna().sum().sum()

test_data.shape

test_data.info()

test_data.isna().sum().sum()

test_data.head()

submission.head()

submission.shape

submission.info()

train_data.duplicated().sum()

test_data.duplicated().sum()

submission.duplicated().sum()

plt.figure(figsize=(50,50))
sns.heatmap(train_data.corr(),cbar=True,annot=True,cmap='Blues')

plt.figure(figsize=(8, 12))
heatmap = sns.heatmap(train_data.corr()[['Cover_Type']].sort_values(by='Cover_Type', ascending=False), vmin=-1, vmax=1, annot=True, cmap='BrBG')
heatmap.set_title('Features Correlating with Cover_Type', fontdict={'fontsize':18}, pad=16)

"""Без скалирования"""

y = train_data['Cover_Type']

X_train = data.drop('Survived', axis=1)

colums_drop = ['Id']

X = train_data.drop('Cover_Type', axis=1)

X

X = X.drop(colums_drop, axis = 1)

X.shape, y.shape

from sklearn.model_selection import train_test_split

from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .25, random_state = 42)

clf=RandomForestClassifier()
clf.fit(X_train, y_train)

y_pred=clf.predict(X_test)

print("   Accuracy: {}".format(metrics.accuracy_score(y_test, y_pred)))

#conf_matrix = confusion_matrix(y_test, y_pred)
#print(conf_matrix)

cm = confusion_matrix(y_test, y_pred, labels=clf.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm,
                              display_labels=clf.classes_, 
                             )
disp.plot()
plt.show()